0  0  public class MergeSort
0  0  {
0  4  private int[] numbers;
0  4  private int[] helper;
0  4  private int number;
0  0  
0  4  public MergeSort ( )
0  4  {
0  8  number = 16;
0  8  numbers = new int[number];
0  8  helper = new int[number];
0  8  for (int i = 0; i < numbers.length; i++)
0  8  {
0  12  numbers[i] = (int)(1 + Math.random()*100);
0  8  }
0  4  }
0  0  
0  4  public static void main (String [] args)
0  4  {
0  8  MergeSort run = new MergeSort();
0  8  run.sortAndPrint();
0  4  }
0  0  
0  4  public void sortAndPrint ( )
0  4  {
0  8  printArray();
0  8  mergesort(0, number - 1);
0  8  printArray();
0  4  }
0  0  
0  4  public void printArray ( )
0  4  {
0  8  System.out.println("\n\n");
0  8  for (int i = 0; i < numbers.length; i++)
0  8  {
0  12  System.out.printf("%-5d",numbers[i]);
0  8  }
0  8  System.out.println("\n\n");
0  4  }
0  0  
0  4  private void mergesort (int low, int high)
0  4  {
0  8  // Check if low is smaller then high, if not then the array is sorted
0  8  if (low < high)
0  8  {
0  12  // Get the index of the element which is in the middle
0  12  int middle = (low + high) / 2;
0  12  // Sort the left side of the array
0  12  mergesort(low, middle);
0  12  // Sort the right side of the array
0  12  mergesort(middle + 1, high);
0  12  // Combine them both
0  12  merge(low, middle, high);
0  8  }
0  4  }
0  0  
0  4  private void merge(int low, int middle, int high)
0  4  {
0  8  // Copy both parts into the helper array
0  8  for (int i = low; i <= high; i++)
0  8  {
0  12  helper[i] = numbers[i];
0  8  }
0  0  
0  8  int i = low;
0  8  int j = middle + 1;
0  8  int k = low;
0  8  // Copy the smallest values from either the left or the right side back
0  8  // to the original array
0  8  while (i <= middle && j <= high)
0  8  {
0  12  if (helper[i] <= helper[j])
0  12  {
0  16  numbers[k] = helper[i];
0  16  i++;
0  12  }
0  12  else
0  12  {
0  16  numbers[k] = helper[j];
0  16  j++;
0  12  }
0  12  k++;
0  8  }
0  8  // Copy the rest of the left side of the array into the target array
0  8  while (i <= middle)
0  8  {
0  12  numbers[k] = helper[i];
0  12  k++;
0  12  i++;
0  8  }
0  4  }
0  0  }